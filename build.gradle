configurations {
	jaxb
}

buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}



}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.test.wsdl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
	generated{
		java.srcDir "${projectDir}/generated/"
	}

	main {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}

	test {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}


repositories {
	mavenCentral()
}

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated/"
	ext.classesDir = "${buildDir}/classes/"
	ext.schema = "${projectDir}/src/main/resources/wsdl/documi/invoice_service.wsdl"
	ext.schemaDir = "${projectDir}/src/main/resources/wsdl/documi/"
	ext.schemas = ["account":"${projectDir}/src/main/resources/wsdl/documi/account_service.wsdl",
				   "invoice":"${projectDir}/src/main/resources/wsdl/documi/invoice_service.wsdl",
				   "exchange":"${projectDir}/src/main/resources/wsdl/documi/exchange_service.wsdl"]
	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)
			xjc(destdir: sourcesDir, package: 'com.test.wsdl.documi') {
				schema(dir: schemaDir, includes: "**/*.wsdl")
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}


			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}


			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}

			}
		}
	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	compile('org.springframework.boot:spring-boot-starter-web-services')
	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}
