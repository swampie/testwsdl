configurations {
    wsimport
}

buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }


}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



group = 'com.test.wsdl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
    generated {
        java.srcDir "${projectDir}/generated/"
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }

    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}


repositories {
    mavenCentral()
}

task wsimport {
    ext.sourcesDir = "${buildDir}/generated/"
    ext.classesDir = "${buildDir}/classes/"
    ext.mappings = ["account" : "account_service.wsdl",
                    "exchange": "exchange_service.wsdl",
                    "invoice" : "invoice_service.wsdl"]

    outputs.dir classesDir
    doLast {
        ext.mappings.each { k, v ->


            ant {
                mkdir(dir: sourcesDir)
                mkdir(dir: classesDir)
                taskdef(name: 'wsimport',
                        classname: 'com.sun.tools.ws.ant.WsImport',
                        classpath: configurations.wsimport.asPath
                )
                wsimport(keep: true,
                        destdir: classesDir,
                        sourcedestdir: sourcesDir,
                        extension: "true",
                        verbose: "true",
                        quiet: "false",
                        package: "com.test.wsdl.documi.${k}",
                        xnocompile: "true",
                        binding: "src/main/resources/wsdl/documi/${k}/bindings.xml",
                        wsdl: "src/main/resources/wsdl/documi/${k}/${v}") {
                    xjcarg(value: "-XautoNameResolution")
                }
                javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                        debugLevel: "lines,vars,source",
                        classpath: configurations.wsimport.asPath) {
                    src(path: sourcesDir)
                    include(name: "**/*.java")
                    include(name: "*.java")
                }
                copy(todir: classesDir) {
                    fileset(dir: sourcesDir, erroronmissingdir: false) {
                        exclude(name: "**/*.java")
                    }
                }
            }

        }
    }

}



dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    compile('org.springframework.boot:spring-boot-starter-web-services')
    wsimport 'com.sun.xml.ws:jaxws-tools:2.1.4'
    compile('io.projectreactor:reactor-test')
    compile(files(wsimport.classesDir).builtBy(wsimport))


}
